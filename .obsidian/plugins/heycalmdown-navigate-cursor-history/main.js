/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => NavigateCursorHistory
});
var import_obsidian = __toModule(require("obsidian"));
function logHistory(backward, cur, forward) {
}
var NavigateCursorHistory = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.backward = [];
    this.forward = [];
  }
  onload() {
    return __async(this, null, function* () {
      this.registerEvent(this.app.workspace.on("file-open", (file) => {
        if (!this.cur) {
          this.cur = { file, line: 0, ch: 0 };
        }
        if (this.cur.file !== file) {
          this.saveHistory(file, { line: 0, ch: 0 });
        }
      }));
      this.addCommand({
        id: "cursor-position-backward",
        name: "Go back",
        editorCallback: (editor, view) => __async(this, null, function* () {
          if (this.backward.length < 1)
            return;
          const cur = this.cur;
          const prev = this.backward.pop();
          this.forward.push(cur);
          if (cur.file !== prev.file) {
            yield this.app.workspace.getMostRecentLeaf().openFile(prev.file);
          }
          this.cur = prev;
          const pos = { line: prev.line, ch: prev.ch };
          editor.setSelection(pos);
          editor.scrollIntoView({ from: pos, to: pos }, true);
          logHistory(this.backward, this.cur, this.forward);
        })
      });
      this.addCommand({
        id: "cursor-position-forward",
        name: "Go forward",
        editorCallback: (editor, view) => __async(this, null, function* () {
          if (this.forward.length < 1)
            return;
          const cur = this.cur;
          const prev = this.forward.pop();
          this.backward.push(this.cur);
          this.cur = prev;
          if (cur.file !== prev.file) {
            yield this.app.workspace.getMostRecentLeaf().openFile(prev.file);
          }
          const pos = { line: prev.line, ch: prev.ch };
          editor.setSelection(pos);
          editor.scrollIntoView({ from: pos, to: pos }, true);
          logHistory(this.backward, this.cur, this.forward);
        })
      });
      this.registerInterval(window.setInterval(() => {
        var _a;
        if (!this.cur)
          return;
        const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
        if (editor) {
          const cursor = editor.getCursor("head");
          this.saveHistory(this.cur.file, cursor);
        }
      }, 1 * 1e3));
    });
  }
  onunload() {
  }
  saveHistory(file, cursor) {
    if (file === this.cur.file && cursor.line === this.cur.line && cursor.ch === this.cur.ch)
      return;
    if (file === this.cur.file && cursor.line === this.cur.line && cursor.ch !== this.cur.ch) {
      this.cur.ch = cursor.ch;
      return;
    }
    this.backward.push(this.cur);
    this.cur = { file, line: cursor.line, ch: cursor.ch };
    this.backward = this.backward.slice(-50);
    this.forward = [];
    logHistory(this.backward, this.cur, this.forward);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRWRpdG9yUG9zaXRpb24sIFRGaWxlLCBFZGl0b3IsIE1hcmtkb3duVmlldywgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW50ZXJmYWNlIEhpc3Rvcnkge1xyXG5cdGZpbGU6IFRGaWxlO1xyXG5cdGxpbmU6IG51bWJlcjtcclxuXHRjaDogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBoaXN0b3J5VG9TdHJpbmcoaGlzdG9yeTogSGlzdG9yeSkge1xyXG4vLyBcdHJldHVybiBgJHtoaXN0b3J5LmZpbGUucGF0aH1AJHtoaXN0b3J5LmxpbmV9YFxyXG4vLyB9XHJcbmZ1bmN0aW9uIGxvZ0hpc3RvcnkoYmFja3dhcmQ6IEhpc3RvcnlbXSwgY3VyOiBIaXN0b3J5LCBmb3J3YXJkOiBIaXN0b3J5W10pIHtcclxuXHQvLyBjb25zb2xlLmxvZyhiYWNrd2FyZC5tYXAoaGlzdG9yeVRvU3RyaW5nKSwgaGlzdG9yeVRvU3RyaW5nKGN1ciksIGZvcndhcmQubWFwKGhpc3RvcnlUb1N0cmluZykpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRlQ3Vyc29ySGlzdG9yeSBleHRlbmRzIFBsdWdpbiB7XHJcblx0YmFja3dhcmQ6IEhpc3RvcnlbXSA9IFtdO1xyXG5cdGZvcndhcmQ6IEhpc3RvcnlbXSA9IFtdO1xyXG5cdGN1cjogSGlzdG9yeTtcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsIChmaWxlKSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0aGlzLmN1cikge1xyXG5cdFx0XHRcdFx0dGhpcy5jdXIgPSB7IGZpbGUsIGxpbmU6IDAsIGNoOiAwIH07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0aGlzLmN1ci5maWxlICE9PSBmaWxlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnNhdmVIaXN0b3J5KGZpbGUsIHsgbGluZTogMCwgY2g6IDAgfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KSxcclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2N1cnNvci1wb3NpdGlvbi1iYWNrd2FyZCcsXHJcblx0XHRcdG5hbWU6ICdHbyBiYWNrJyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IGFzeW5jIChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMuYmFja3dhcmQubGVuZ3RoIDwgMSkgcmV0dXJuO1xyXG5cdFx0XHRcdGNvbnN0IGN1ciA9IHRoaXMuY3VyXHJcblx0XHRcdFx0Y29uc3QgcHJldiA9IHRoaXMuYmFja3dhcmQucG9wKClcclxuXHRcdFx0XHR0aGlzLmZvcndhcmQucHVzaChjdXIpXHJcblx0XHRcdFx0aWYgKGN1ci5maWxlICE9PSBwcmV2LmZpbGUpIHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRNb3N0UmVjZW50TGVhZigpLm9wZW5GaWxlKHByZXYuZmlsZSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhpcy5jdXIgPSBwcmV2XHJcblx0XHRcdFx0Y29uc3QgcG9zOiBFZGl0b3JQb3NpdGlvbiA9IHsgbGluZTogcHJldi5saW5lLCBjaDogcHJldi5jaCB9XHJcblx0XHRcdFx0ZWRpdG9yLnNldFNlbGVjdGlvbihwb3MpO1xyXG5cdFx0XHRcdGVkaXRvci5zY3JvbGxJbnRvVmlldyh7IGZyb206IHBvcywgdG86IHBvcyB9LCB0cnVlKTtcclxuXHRcdFx0XHRsb2dIaXN0b3J5KHRoaXMuYmFja3dhcmQsIHRoaXMuY3VyLCB0aGlzLmZvcndhcmQpXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdjdXJzb3ItcG9zaXRpb24tZm9yd2FyZCcsXHJcblx0XHRcdG5hbWU6ICdHbyBmb3J3YXJkJyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IGFzeW5jIChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMuZm9yd2FyZC5sZW5ndGggPCAxKSByZXR1cm47XHJcblx0XHRcdFx0Y29uc3QgY3VyID0gdGhpcy5jdXJcclxuXHRcdFx0XHRjb25zdCBwcmV2ID0gdGhpcy5mb3J3YXJkLnBvcCgpXHJcblx0XHRcdFx0dGhpcy5iYWNrd2FyZC5wdXNoKHRoaXMuY3VyKVxyXG5cdFx0XHRcdHRoaXMuY3VyID0gcHJldlxyXG5cdFx0XHRcdGlmIChjdXIuZmlsZSAhPT0gcHJldi5maWxlKSB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TW9zdFJlY2VudExlYWYoKS5vcGVuRmlsZShwcmV2LmZpbGUpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnN0IHBvczogRWRpdG9yUG9zaXRpb24gPSB7IGxpbmU6IHByZXYubGluZSwgY2g6IHByZXYuY2ggfVxyXG5cdFx0XHRcdGVkaXRvci5zZXRTZWxlY3Rpb24ocG9zKTtcclxuXHRcdFx0XHRlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoeyBmcm9tOiBwb3MsIHRvOiBwb3MgfSwgdHJ1ZSk7XHJcblx0XHRcdFx0bG9nSGlzdG9yeSh0aGlzLmJhY2t3YXJkLCB0aGlzLmN1ciwgdGhpcy5mb3J3YXJkKVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IHtcclxuXHRcdFx0aWYgKCF0aGlzLmN1cikgcmV0dXJuO1xyXG5cdFx0XHRjb25zdCBlZGl0b3IgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpPy5lZGl0b3JcclxuXHRcdFx0aWYgKGVkaXRvcikge1xyXG5cdFx0XHRcdGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoXCJoZWFkXCIpO1xyXG5cdFx0XHRcdHRoaXMuc2F2ZUhpc3RvcnkodGhpcy5jdXIuZmlsZSwgY3Vyc29yKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMSAqIDEwMDApKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cclxuXHR9XHJcblxyXG5cdHNhdmVIaXN0b3J5KGZpbGU6IFRGaWxlLCBjdXJzb3I6IEVkaXRvclBvc2l0aW9uKSB7XHJcblx0XHRpZiAoZmlsZSA9PT0gdGhpcy5jdXIuZmlsZSAmJiBjdXJzb3IubGluZSA9PT0gdGhpcy5jdXIubGluZSAmJiBjdXJzb3IuY2ggPT09IHRoaXMuY3VyLmNoKSByZXR1cm47XHJcblx0XHRpZiAoZmlsZSA9PT0gdGhpcy5jdXIuZmlsZSAmJiBjdXJzb3IubGluZSA9PT0gdGhpcy5jdXIubGluZSAmJiBjdXJzb3IuY2ggIT09IHRoaXMuY3VyLmNoKSB7XHJcblx0XHRcdHRoaXMuY3VyLmNoID0gY3Vyc29yLmNoXHJcblx0XHRcdHJldHVyblxyXG5cdFx0fVxyXG5cdFx0dGhpcy5iYWNrd2FyZC5wdXNoKHRoaXMuY3VyKVxyXG5cdFx0dGhpcy5jdXIgPSB7IGZpbGUsIGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIH1cclxuXHRcdHRoaXMuYmFja3dhcmQgPSB0aGlzLmJhY2t3YXJkLnNsaWNlKC01MClcclxuXHRcdHRoaXMuZm9yd2FyZCA9IFtdXHJcblx0XHRsb2dIaXN0b3J5KHRoaXMuYmFja3dhcmQsIHRoaXMuY3VyLCB0aGlzLmZvcndhcmQpXHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
